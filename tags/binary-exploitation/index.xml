<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>binary exploitation on Camelliose</title>
    <link>https://fikriguska.xyz/tags/binary-exploitation/</link>
    <description>Recent content in binary exploitation on Camelliose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 12 Aug 2020 00:40:58 +0700</lastBuildDate>
    
	<atom:link href="https://fikriguska.xyz/tags/binary-exploitation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hacktoday 2020 (Quals) - buffer overflow</title>
      <link>https://fikriguska.xyz/posts/2020/08/hacktoday-2020-quals-buffer-overflow/</link>
      <pubDate>Wed, 12 Aug 2020 00:40:58 +0700</pubDate>
      
      <guid>https://fikriguska.xyz/posts/2020/08/hacktoday-2020-quals-buffer-overflow/</guid>
      <description>Overview Diberikan binary dengan proteksi sebagai berikut:
Binary tersebut tersebut menampilkan tulisan &amp;ldquo;OK, I&amp;rsquo;ll give you buffer overflow&amp;rdquo; lalu meminta input maksimal 1000 byte dan terdapat beberapa pengecekan setiap 8 byte. Berikut hasil dekompilasi fungsi main:
int __cdecl main(int argc, const char **argv, const char **envp) { signed __int64 v4; // [rsp+0h] [rbp-50h]  int v5; // [rsp+8h] [rbp-48h]  int v6; // [rsp+Ch] [rbp-44h]  char buf[64]; // [rsp+10h] [rbp-40h]  __int64 savedregs; // [rsp+50h] [rbp+0h]  memset(buf, 0, sizeof(buf)); v5 = 0; init(&amp;amp;savedregs, argv, buf); strcpy(str, &amp;#34;OK, I&amp;#39;ll give you buffer overflow&amp;#34;); puts(str); v6 = read(0, buf, 0x3E8uLL); while ( v6 / 8 !</description>
    </item>
    
    <item>
      <title>Hacktoday 2020 (Quals) - no free</title>
      <link>https://fikriguska.xyz/posts/2020/08/hacktoday-2020-quals-no-free/</link>
      <pubDate>Tue, 11 Aug 2020 22:16:58 +0700</pubDate>
      
      <guid>https://fikriguska.xyz/posts/2020/08/hacktoday-2020-quals-no-free/</guid>
      <description>overview Diberikan file libc 2.23 dan binary dengan proteksi sebagai berikut.
Pada saat memulai program, akan diminta username. Binary tersebut bisa menyimpan suatu note yang terdiri dari nama dan content, note tersebut bisa dilihat, diedit, tetapi tidak bisa dihapus. Username juga bisa diedit, dan yang terakhir kita bisa mengirim feedback. Nama, content, username, dan feedback akan disimpan dalam heap.
Vulnerability Vulnerability terletak pada fungsi edit, berikut baris yang vuln:
LOBYTE(nbytes) = *(_DWORD *)list[2 * v4]; hanya 1 byte nbytes pertama yang diassign pada baris diatas.</description>
    </item>
    
    <item>
      <title>Hacktoday 2020 (Quals) - sum</title>
      <link>https://fikriguska.xyz/posts/2020/08/hacktoday-2020-quals-sum/</link>
      <pubDate>Tue, 11 Aug 2020 21:43:36 +0700</pubDate>
      
      <guid>https://fikriguska.xyz/posts/2020/08/hacktoday-2020-quals-sum/</guid>
      <description>Overview Diberikan sebuah file libc 2.31 dan binary dengan proteksi sebagai berikut:
Berikut hasil dekompilasi fungsi main:
int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [rsp+1Fh] [rbp-61h]  int v5; // [rsp+20h] [rbp-60h]  int i; // [rsp+24h] [rbp-5Ch]  __int64 v7; // [rsp+28h] [rbp-58h]  int s[18]; // [rsp+30h] [rbp-50h]  unsigned __int64 v9; // [rsp+78h] [rbp-8h]  v9 = __readfsqword(0x28u); v7 = 0LL; init(*(_QWORD *)&amp;amp;argc, argv, envp); banner(); do { v7 = 0LL; memset(s, 0, 0x40uLL); printf(&amp;#34;n: &amp;#34;, 0LL); __isoc99_scanf(&amp;#34;%d&amp;#34;, &amp;amp;v5); for ( i = 0; i &amp;lt; v5; ++i ) { printf(&amp;#34;%d.</description>
    </item>
    
  </channel>
</rss>